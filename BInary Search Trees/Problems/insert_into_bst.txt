class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        //  iterative method TC -> O(logN)/O(N) and SC -> O(logN)/O(N)
        if (!root) return new TreeNode(val);
        TreeNode* curr = root;
        while (true) {
            if (val < curr->val) {
                if (curr->left == nullptr) {
                    curr->left = new TreeNode(val);
                    break;
                }
                curr = curr->left;
            } else {
                if (curr->right == nullptr) {
                    curr->right = new TreeNode(val);
                    break;
                }
                curr = curr->right;
            }
        }
        return root;

        // recursive method TC -> O(logN)/O(N) and SC -> O(logN)/O(N)
        // if (!root) return new TreeNode(val);
        // if (val < root->val)
        //     root->left = insertIntoBST(root->left, val);
        // else
        //     root->right = insertIntoBST(root->right, val);
        // return root;
    }
};
