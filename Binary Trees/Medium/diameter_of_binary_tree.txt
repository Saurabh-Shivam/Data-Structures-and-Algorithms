/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    // int maxHeight(TreeNode* node){
    //     if(node == nullptr) return 0;
    //     int leftHeight = maxHeight(node->left);
    //     int rightHeight = maxHeight(node->right);
    //     int maxHeight = max(leftHeight, rightHeight) + 1;
    //     return maxHeight;
    // }

    int depth(TreeNode* node, int& maxDepth){
        if(node == nullptr) return 0; 
        int leftSide = depth(node->left, maxDepth);
        int rightSide = depth(node->right, maxDepth);
        maxDepth = max(maxDepth, leftSide + rightSide);
        return max(leftSide, rightSide) + 1;

    }

    int diameterOfBinaryTree(TreeNode* root) {
        // if(root == nullptr) return 0;
        // int leftSide = diameterOfBinaryTree(root->left);
        // int rightSide = diameterOfBinaryTree(root->right);
        // int bothSide = maxHeight(root->left) + maxHeight(root->right);
        // int ans = max(leftSide, max(rightSide, bothSide));
        // return ans;

        // optimising the code
        int maxDepth = 0;
        depth(root, maxDepth);
        return maxDepth;
    }
};