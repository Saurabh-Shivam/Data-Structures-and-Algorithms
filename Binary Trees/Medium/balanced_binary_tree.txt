/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    // brute force TC -> O(n^2)
    // int maxHeight(TreeNode* node){
    //     if(node == nullptr) return 0;
    //     int lHeight = maxHeight(node->left);
    //     int rHeight = maxHeight(node->right);
    //     return max(lHeight, rHeight) + 1;
    // }

    // bool isBalanced(TreeNode* root) {
    //     if(root == nullptr) return true;

    //     int leftHeight = maxHeight(root->left); // O(n)
    //     int rightHeight = maxHeight(root->right); // O(n)
    //     int diff = abs(leftHeight - rightHeight);

    //     int ans1 = (diff <= 1);
    //     bool leftAns = isBalanced(root->left); // Recursive call
    //     bool rightAns = isBalanced(root->right); // Recursive call

    //     if(ans1 && leftAns && rightAns) return true;
    //     else return false;
    // }

    // optimised TC -> O(n)
    int checkHeight(TreeNode* root) {
        if (root == nullptr) return 0;

        int leftHeight = checkHeight(root->left);
        if (leftHeight == -1) return -1; // Left subtree not balanced

        int rightHeight = checkHeight(root->right);
        if (rightHeight == -1) return -1; // Right subtree not balanced

        if (abs(leftHeight - rightHeight) > 1) return -1; // Not balanced at current node

        return max(leftHeight, rightHeight) + 1; // Return height
    }

    bool isBalanced(TreeNode* root) {
        return checkHeight(root) != -1;
    }

};