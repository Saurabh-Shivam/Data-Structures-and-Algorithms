#include <unordered_set>
#include <string>
using namespace std;

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        // brute force TC -> O(n^2) and SC -> O(1)
        // int n = s.size();
        // int maxLen = 0;
        // for(int i = 0; i < n; i++) {
        //     unordered_set<char> hash;
        //     for(int j = i; j < n; j++) {
        //         if(hash.count(s[j])) break;  
        //         hash.insert(s[j]);
        //         int len = j - i + 1;
        //         maxLen = max(maxLen, len);
        //     }
        // }
        // return maxLen;

    // optimised TC -> O(n) and O(1)
        vector < int > hash(256, -1);
        int left = 0, right = 0;
        int n = s.size();
        int maxLen = 0;
        while (right < n) {
            if (hash[s[right]] != -1)
            if(hash[s[right]] >= left){
                left = hash[s[right]] + 1;
            }

            int len = right - left + 1;
            maxLen = max(maxLen, len);
            hash[s[right]] = right;
            right++;
        }
        return maxLen;
    }
};
