// class Solution {
// public:
//     void findPathHelper(int i, int j, vector<vector<int>> &a, int n, vector<string> &ans, string move,
//      vector<vector<int>> &vis) {
//         if (i == n - 1 && j == n - 1) {
//             ans.push_back(move);
//             return;
//         }

//         // downward
//         if (i + 1 < n && !vis[i + 1][j] && a[i + 1][j] == 1) {
//             vis[i][j] = 1;
//             findPathHelper(i + 1, j, a, n, ans, move + 'D', vis);
//             vis[i][j] = 0;
//         }

//         // left
//         if (j - 1 >= 0 && !vis[i][j - 1] && a[i][j - 1] == 1) {
//             vis[i][j] = 1;
//             findPathHelper(i, j - 1, a, n, ans, move + 'L', vis);
//             vis[i][j] = 0;
//         }

//         // right 
//         if (j + 1 < n && !vis[i][j + 1] && a[i][j + 1] == 1) {
//             vis[i][j] = 1;
//             findPathHelper(i, j + 1, a, n, ans, move + 'R', vis);
//             vis[i][j] = 0;
//         }

//         // upward
//         if (i - 1 >= 0 && !vis[i - 1][j] && a[i - 1][j] == 1) {
//             vis[i][j] = 1;
//             findPathHelper(i - 1, j, a, n, ans, move + 'U', vis);
//             vis[i][j] = 0;
//         }
//     }

//     vector<string> ratInMaze(vector<vector<int>> &maze) {
//         vector<string> ans;
//         int n = maze.size();
//         if (n == 0) return ans;

//         vector<vector<int>> vis(n, vector<int>(n, 0));

//         if (maze[0][0] == 1) {
//             findPathHelper(0, 0, maze, n, ans, "", vis);
//         }

//         return ans;
//     }
// };

class Solution {
public:
    // avoiding the multiple if statement calls
    void findPathHelper(int i, int j, vector<vector<int>> &a, int n, vector<string> &ans, string move,
    vector<vector<int>> &vis, int di[], int dj[]) {
        if (i == n - 1 && j == n - 1) {
            ans.push_back(move);
            return;
        }

        string dir = "DLRU";  // Local inside helper

        for (int idx = 0; idx < 4; idx++) {
            int next_i = i + di[idx];
            int next_j = j + dj[idx];
            if (next_i >= 0 && next_j >= 0 && next_i < n && next_j < n &&
                !vis[next_i][next_j] && a[next_i][next_j] == 1) {
                vis[i][j] = 1;
                findPathHelper(next_i, next_j, a, n, ans, move + dir[idx], vis, di, dj);
                vis[i][j] = 0;
            }
        }
    }

    vector<string> ratInMaze(vector<vector<int>> &maze) {
        vector<string> ans;
        int n = maze.size();
        if (n == 0) return ans;

        vector<vector<int>> vis(n, vector<int>(n, 0));
        
        // Direction deltas (fixed order for D, L, R, U)
        int di[] = {+1, 0, 0, -1};
        int dj[] = {0, -1, +1, 0};

        if (maze[0][0] == 1) {
            findPathHelper(0, 0, maze, n, ans, "", vis, di, dj);
        }

        return ans;
    }
};

