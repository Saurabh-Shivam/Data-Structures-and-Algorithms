class Solution {
public:

//  bool isSafe1(int row, int col, vector < string > board, int n) {
//       // check upper diagonal element
//       int duprow = row;
//       int dupcol = col;

//       while (row >= 0 && col >= 0) {
//         if (board[row][col] == 'Q')
//           return false;
//         row--;
//         col--;
//       }

//       // check left side element 
//       col = dupcol;
//       row = duprow;
//       while (col >= 0) {
//         if (board[row][col] == 'Q')
//           return false;
//         col--;
//       }
//       // check lower diagonal element
//       row = duprow;
//       col = dupcol;
//       while (row < n && col >= 0) {
//         if (board[row][col] == 'Q')
//           return false;
//         row++;
//         col--;
//       }
//       return true;
//     }

    void solve(int col, vector<string>& board, vector<vector<string>>& res, vector<int>& leftRow, vector<int>& upperDiag, vector<int>& lowerDiag, int n){
        if(col == n){
            res.push_back(board);
            return;
        }
        for(int row=0; row<n; row++){
            // optmised by removing isSafe function
            // if (isSafe1(row, col, board, n)) {
            //     board[row][col] = 'Q';
            //     solve(col + 1, board, ans, n);
            //     board[row][col] = '.';
            // }
            if(leftRow[row] == 0 && lowerDiag[row + col] == 0 && upperDiag[n-1 + col - row] == 0){
                board[row][col] = 'Q';
                leftRow[row] = 1;
                lowerDiag[row + col] = 1;
                upperDiag[n-1 + col-row] = 1;
                solve(col+1, board, res, leftRow, upperDiag, lowerDiag, n);
                // backtrack
                board[row][col] = '.';
                leftRow[row] = 0;
                lowerDiag[row + col] = 0;
                upperDiag[n-1 + col-row] = 0;
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> res;
        vector<string> board(n);
        string s(n, '.');
        for(int i=0; i<n; i++) board[i] = s;
        vector<int> leftRow(n,0), upperDiag(2 * n - 1, 0), lowerDiag(2 * n - 1, 0);
        solve(0, board, res, leftRow, upperDiag, lowerDiag, n);
        return res;
    }
};