#include <bits/stdc++.h>
using namespace std;

// Recursive function to generate all
// subsequences with sum of elements k
void findSubsequence(int ind, int sum, int k, vector<int> &cur, 
                vector<int> &arr, vector<vector<int>> &res) {
    int n = arr.size();
    
    // base case
    if(ind == n) {

        // check if sum of elements of current
        // subset is equal to k
        if(sum == k) {

            // add the subset in result
            res.push_back(cur);
        }
        return;
    }

    // add the current element in subset
    cur.push_back(arr[ind]);
    findSubsequence(ind + 1, sum + arr[ind], k, cur, arr, res);

    // remove the added element
    cur.pop_back();

    // skip the current element arr[ind]
    findSubsequence(ind + 1, sum, k, cur, arr, res);

}

// Function to find the subsequences
// with sum of its elements k
vector<vector<int>> subsequencesSumK(vector<int> &arr, int k) {

    // to store the subsequences
    // with sum of its elements k
    vector<vector<int>> res;

    // to store the current subset
    vector<int> cur;

    findSubsequence(0, 0, k, cur, arr, res);

    return res;
}

int main() {
    vector<int> arr = {17, 18, 6, 11, 2, 4};
    int k = 6;
    vector<vector<int>> ans = subsequencesSumK(arr, k);
    for(auto i:ans) {
        for(auto j:i) {
            cout<<j<<" ";
        }
        cout<<endl;
    }
    return 0;
}