class Solution {
public:
    void findCombinations(int index, vector<int>& nums, int target,
    vector<vector<int>>& res, vector<int>& curr) {
        if (target == 0) {
            res.push_back(curr);
            return;
        }

        for (int i = index; i < nums.size(); ++i) {
            // Skip duplicates
            if (i > index && nums[i] == nums[i - 1])
                continue;

            if (nums[i] > target)
                break;

            curr.push_back(nums[i]);
            findCombinations(i + 1, nums, target - nums[i], res, curr);
            curr.pop_back();
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end()); 
        vector<vector<int>> res;
        vector<int> curr;
        findCombinations(0, candidates, target, res, curr);
        return res;
    }
};
