// class MyQueue {
// public:
//     stack <int> st1, st2;
//     MyQueue() {}
    
//     // put the top elements one by one from s1 to s2
//     // push new element into s1
//     // put the top elements one by one from s2 to s1
//     void push(int x) {
//         while(!st1.empty()){
//             st2.push(st1.top());
//             st1.pop();
//         }
//         st1.push(x);
//         while(!st2.empty()){
//             st1.push(st2.top());
//             st2.pop();
//         }
//     }
    
//     int pop() {
//         int ans = st1.top();
//         st1.pop();
//         return ans;
//     }
    
//     int peek() {return st1.top();}
    
//     bool empty() {return st1.empty();}
// };

// optimised
class MyQueue {
public:
    stack<int> s1, s2;

    MyQueue() {}

    void push(int x) {
        s1.push(x); // Always push to s1
    }

    int pop() {
        if (s2.empty()) {
            while (!s1.empty()) {
                s2.push(s1.top());
                s1.pop();
            }
        }
        int val = s2.top();
        s2.pop();
        return val;
    }

    int peek() {
        if (s2.empty()) {
            while (!s1.empty()) {
                s2.push(s1.top());
                s1.pop();
            }
        }
        return s2.top();
    }

    bool empty() {
        return s1.empty() && s2.empty();
    }
};


/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */