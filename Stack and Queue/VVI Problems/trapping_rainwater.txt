class Solution {
public:
    int trap(vector<int>& height) {
        // brute force Total Time Complexity -> O(n) + O(n) + O(n) = O(3n)
        // Total Space Complexity -> O(n) + O(n) = O(2n)
        // int n = height.size();
        // int prefix[n], suffix[n];
        // // scan from left to right
        // prefix[0] = height[0];
        // for (int i = 1; i < n; i++) {
        //     prefix[i] = max(prefix[i - 1], height[i]);
        // }
        // // scan from right to left
        // suffix[n - 1] = height[n - 1];
        // for (int i = n - 2; i >= 0; i--) {
        //     suffix[i] = max(suffix[i + 1], height[i]);
        // }
        // int waterTrapped = 0;
        // for (int i = 0; i < n; i++) {
        //     waterTrapped += min(prefix[i], suffix[i]) - height[i];
        // }
        // return waterTrapped;

        // optimised TC -> O(n) and SC -> O(1)
        int n = height.size();
        int left = 0, right = n-1;
        int total = 0;
        int maxLeft = 0, maxRight = 0;
        while(left <= right){
            if(height[left] <= height[right]){
                if(maxLeft > height[left]){
                    total += maxLeft - height[left];
                }
                else{
                    maxLeft = height[left];
                }
                left++;
            }
            else{
                if(maxRight > height[right]){
                    total += maxRight - height[right];
                }
                else{
                    maxRight = height[right];
                }
                right--;
            }
        }
        return total;
    }
};