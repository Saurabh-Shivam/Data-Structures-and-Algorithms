class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        // brute force TC -> O() and SC -> O()
        // int n = nums.size();
        // vector<int> res;
        // for(int i = 0; i <= n - k; i++) {
        //     int maxi = nums[i];
        //     for(int j = i; j < i + k; j++) {
        //         maxi = max(maxi, nums[j]);
        //     }
        //     res.push_back(maxi);
        // }
        // return res;

        // optimised TC -> O(2n) and SC -> O(k) + O(n-k)
        deque < int > dq;
        vector < int > res;
        for (int i = 0; i < nums.size(); i++) {
            if (!dq.empty() && dq.front() == i - k) dq.pop_front();

            while (!dq.empty() && nums[dq.back()] < nums[i]) dq.pop_back();

            dq.push_back(i);
            if (i >= k - 1) res.push_back(nums[dq.front()]);
        }
        return res;
    }
};
