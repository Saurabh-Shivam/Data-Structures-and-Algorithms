/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        // brute force TC -> O(n+n) ~ O(n) and SC -> O(1)
        // ListNode* temp = head;
        // int count = 0;
        // while(temp != nullptr){
        //     temp = temp->next;
        //     count++;
        // }
        // int mid = count / 2 + 1;
        // temp = head;
        // while (temp != nullptr) {
        //     mid = mid - 1;
        //     if (mid == 0) break;
        //     temp = temp->next;
        // }
        // return temp;

        // optimized TC -> O(n/2) ~ O(n) and SC -> O(1)
        // TortoiseHare Method
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast != nullptr && fast->next != nullptr){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
};