class Solution {
public:

    int findDays(vector<int>weight, int cap){
        int n = weight.size();
        int load = 0;
        int day = 1;
        for(int i=0; i<n; i++){
            if(load+weight[i] > cap){
                // if total load goves beyond capacity then move to next day
                day++;
                load = weight[i];
            }
            else{
                load += weight[i];
            }
        }
        return day;
    }

    int shipWithinDays(vector<int>& weights, int days) {
        int n = weights.size();
        // start = max weight
        int start = *max_element(weights.begin(), weights.end());
        // end = sum of all the weights
        int end = accumulate(weights.begin(), weights.end(), 0);
        int ans = 0;
        while(start <= end){
            int mid = start + (end-start)/2;
            if(findDays(weights, mid) <= days){
                ans = mid;
               // eliminate right half as looking for least capacity
                end = mid-1;
            }
            else{
                // eliminate left half
                start = mid+1;
            }
        }
        return ans;
    }
};