class Solution
{
public:
    bool underThreshold(vector<int> nums, int divi, int th)
    {
        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; i++)
        {
            int quot = ceil((double)nums[i] / (double)divi);
            sum += quot;
        }
        if (sum <= th)
            return true;

        return false;
    }

    int smallestDivisor(vector<int> &nums, int threshold)
    {
        int n = nums.size();
        int maxi = INT_MIN;
        for (int i = 0; i < n; i++)
        {
            maxi = max(maxi, nums[i]);
        }
        int start = 1;
        int end = maxi;
        int ans = start;
        while (start <= end)
        {
            int mid = start + (end - start) / 2;
            if (underThreshold(nums, mid, threshold))
            {
                ans = mid;
                end = mid - 1;
            }
            else
            {
                start = mid + 1;
            }
        }

        return ans;
    }
};