class Solution {
public:

    int maxOf(vector<int>& piles){
        int maxi = INT_MIN;
        for(int i=0; i<piles.size(); i++){
            if(piles[i] > maxi){
                maxi = piles[i];
            }
        }
        return maxi;
    }

    long long calculateTotalHrs(vector<int>& piles, int hours){
        long long totalHrs = 0;
        int n = piles.size();
        for(int i=0; i<n; i++){
            // totalHrs += ceil((double)(piles[i]) / (double)(hours));
            // to make testcase 125/126 pass we are doing so to avoid double and ceil issue
            totalHrs += (piles[i] + hours - 1) / hours;  // Integer ceiling
        }
        return totalHrs;
    }

    int minEatingSpeed(vector<int>& piles, int h) {
        int start = 1;
        int end = maxOf(piles);
        int ans = INT_MAX;
        while(start <= end){
            int mid = start + (end-start)/2;
            long long totalHrs = calculateTotalHrs(piles, mid);
            if(totalHrs <= h){
                ans = mid;
                end = mid-1;
            }
            else{
                start = mid+1;
            }
        }
        return ans;
    }
};