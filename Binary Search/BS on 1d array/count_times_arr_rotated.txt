#include <bits/stdc++.h>
using namespace std;

int findKRotation(vector<int> &arr) {
    int start = 0, end = arr.size() - 1;
    int ans = INT_MAX;
    int index = -1;
    while (start <= end) {
        int mid = (start + end) / 2;
        //search space is already sorted
        //then arr[start] will always be
        //the minimum in that search space:
        if (arr[start] <= arr[end]) {
            if (arr[start] < ans) {
                index = start;
                ans = arr[start];
            }
            break;
        }

        //if left part is sorted:
        if (arr[mid] >= arr[start]) {
            // keep the minimum:
           min(arr[start], ans);
           index = start;
            // Eliminate left half:
            start = mid + 1;
        }
        else { //if right part is sorted:
            // keep the minimum:
            min(arr[mid], ans);
            index = mid;

            // Eliminate right half:
            end = mid - 1;
        }
    }
    return index;
}

int main()
{
    vector<int> arr = {4, 5, 6, 7, 0, 1, 2, 3};
    int ans = findKRotation(arr);
    cout << "The array is rotated " << ans << " times.\n";
    return 0;
}

