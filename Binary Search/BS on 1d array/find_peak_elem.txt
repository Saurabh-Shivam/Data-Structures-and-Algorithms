class Solution {
public:
   int findPeakElement(vector<int>& nums) {
    int n = nums.size();
    // edge case
    if (n == 1) return 0;

    int start = 0;
    int end = n - 1;
    while (start <= end) {
        int mid = start + (end - start) / 2;
        // Edge case: first element, only check right neighbor
        if (mid == 0) {
            if (nums[0] > nums[1]) return 0;
            else start = mid + 1;
        }
        // Edge case: last element, only check left neighbor
        else if (mid == n - 1) {
            if (nums[n - 1] > nums[n - 2]) return n - 1;
            else end = mid - 1;
        }
        // Middle elements, check both neighbors
        else if (nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1]) {
            return mid;
        }
        else if (nums[mid] < nums[mid + 1]) {
            start = mid + 1;
        }
        else {
            end = mid - 1;
        }
    }
    return -1;  
}

};