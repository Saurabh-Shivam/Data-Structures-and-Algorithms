class Solution
{
public:
    // int firstOccur(vector<int>& nums, int key){
    //     int n = nums.size();
    //     int start = 0;
    //     int end = n-1;
    //     int ans = -1;
    //     int mid = start + (end-start)/2;
    //     while(start<=end){
    //         if(nums[mid] == key){
    //             ans = mid;
    //             end = mid-1;
    //         }
    //         else if(key > nums[mid])
    //             start = mid+1;
    //         else
    //             end = mid-1;
    //         mid = start + (end-start)/2;
    //     }

    //     return ans;
    // }
    // int lastOccur(vector<int>& nums, int key){
    //     int n = nums.size();
    //     int start = 0;
    //     int end = n-1;
    //     int ans = -1;
    //     int mid = start + (end-start)/2;
    //     while(start<=end){
    //         if(nums[mid] == key){
    //             ans = mid;
    //             start = mid+1;
    //         }
    //         else if(key > nums[mid])
    //             start = mid+1;
    //         else
    //             end = mid-1;
    //         mid = start + (end-start)/2;
    //     }

    //     return ans;
    // }

    // avoiding repetation in the above functions
    int findOccurrence(vector<int> &nums, int key, bool findFirst)
    {
        int start = 0, end = nums.size() - 1;
        int ans = -1;

        while (start <= end)
        {
            int mid = start + (end - start) / 2;

            if (nums[mid] == key)
            {
                ans = mid;
                if (findFirst)
                    end = mid - 1; // search on left for first occur
                else
                    start = mid + 1; // search on right for last occur
            }
            else if (key > nums[mid])
            {
                start = mid + 1;
            }
            else
            {
                end = mid - 1;
            }
        }

        return ans;
    }
    vector<int> searchRange(vector<int> &nums, int target)
    {
        // int firstOcc = firstOccur(nums, target);
        // int lastOcc = lastOccur(nums, target);
        int firstOcc = findOccurrence(nums, target, true);
        int lastOcc = findOccurrence(nums, target, false);
        return {firstOcc, lastOcc};
    }
};