class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        // brute force TC -> O(m + n) and SC -> O(m + n)
        // vector<int> temp(m + n);
        // int i = 0;
        // int j = 0;
        // int k = 0;
        // while(i < m && j < n){
        //     if(nums1[i] <= nums2[j]) temp[k++] = nums1[i++];
        //     else temp[k++] = nums2[j++];
        // }
        // while(i < m) temp[k++] = nums1[i++];
        // while(j < n) temp[k++] = nums2[j++];

        // for (int i = 0; i < m + n; i++) {
        //     nums1[i] = temp[i];
        // }

        // optimised TC -> O(m + n) and SC -> O(1)
        // i is till mth element of nums1
        int i = m - 1;
        // j is till nth element of nums2
        int j = n - 1;
        // k is at last element of nums1
        int k = m + n -1;
        while(i >= 0 && j >= 0){
            if(nums1[i] > nums2[j]) nums1[k--] = nums1[i--];
            else nums1[k--] = nums2[j--];
        }
        // case when n2 is not completed just copy the remaining elements
        while(j >= 0) nums1[k--] = nums2[j--];
    }
};