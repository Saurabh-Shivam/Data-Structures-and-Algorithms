class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int indx = -1;
        int n = nums.size();
        // finding the breakpoint/dip from back of array
        for(int i=n-2; i>=0; i--){
            if(nums[i] < nums[i+1]){
                indx = i;
                break;
            }
        }

        // if there is no dip then return the reverse of array
        if(indx == -1){
            reverse(nums.begin(), nums.end());
            return;
        }

        // swapping the dipped element with just larger element in the given range
        for(int i=n-1; i>indx; i--){
            if(nums[i] > nums[indx]){
                swap(nums[i], nums[indx]);
                break;
            }
        }

        // reversing the remaining elements from indx+1 to end to get next permutated list
        reverse(nums.begin() + indx+1, nums.end());
    }
};