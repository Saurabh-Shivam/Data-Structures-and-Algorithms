/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        // // brute force TC ->O(n) and SC -> O(n)
        // if(!head || left == right) return head;
        // // stroing all nodes in a vector
        // vector<ListNode*> nodes;
        // ListNode* curr = head;
        // while(curr){
        //     nodes.push_back(curr);
        //     curr = curr->next;
        // }
        // // reverse the subarray from left-1 to right-1
        // int i = left-1, j = right-1;
        // while(i < j){
        //     swap(nodes[i], nodes[j]);
        //     i++;
        //     j--;
        // }
        // // reconnecting the nodes 
        // for(int k = 0; k < nodes.size()-1; k++){
        //     nodes[k]->next = nodes[k+1];
        // }
        // nodes.back()->next = nullptr;
        // // return new head
        // return nodes[0];

        // optimised 
        if(!head || left == right) return head;
        ListNode dummy(0);
        dummy.next = head;
        ListNode* prev = &dummy;
        
        // move prev to node before left
        for(int i = 1; i < left; i++) prev = prev->next;

        // reverse from left to right
        ListNode* curr = prev->next;
        ListNode* nextCurr = nullptr;

        for(int i = 0; i < right - left; i++){
            nextCurr = curr->next;
            curr->next = nextCurr->next;
            nextCurr->next = prev->next;
            prev->next = nextCurr;
        }
        return dummy.next;
    }
};